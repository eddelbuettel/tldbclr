% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tasks_api.R
\docType{class}
\name{TasksApi}
\alias{TasksApi}
\title{Tasks operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Tasks
}
\section{Methods}{

\describe{
\strong{ RunSQL } \emph{  }
Run a sql query

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } sql \link{SQLParameters}
\item \emph{ @param } accept.encoding character


\item status code : 200 | JSON results in array of objects form, if the query returns results

\item return type : array[object] 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 204 | SQL executed successfully


\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ TaskIdGet } \emph{  }
Fetch an array task

\itemize{
\item \emph{ @param } id character
\item \emph{ @returnType } \link{ArrayTask} \cr


\item status code : 200 | Array task

\item return type : ArrayTask 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ TasksGet } \emph{  }
Fetch a list of all array tasks a user has access to

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } created.by character
\item \emph{ @param } array character
\item \emph{ @param } start integer
\item \emph{ @param } end integer
\item \emph{ @param } page integer
\item \emph{ @param } per.page integer
\item \emph{ @param } type character
\item \emph{ @param } status character
\item \emph{ @param } search character
\item \emph{ @param } orderby character
\item \emph{ @returnType } \link{ArrayTaskData} \cr


\item status code : 200 | Array of all tasks user has access too

\item return type : ArrayTaskData 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  RunSQL  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace to run task under is in (an organization name or user's username)
var.sql <- SQLParameters$new() # SQLParameters | sql being submitted
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- TasksApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RunSQL(var.namespace, var.sql, accept.encoding=var.accept.encoding)


####################  TaskIdGet  ####################

library(tiledbcloud)
var.id <- 'id_example' # character | task id to fetch

api.instance <- TasksApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$TaskIdGet(var.id)


####################  TasksGet  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace to filter
var.created.by <- 'created.by_example' # character | username to filter
var.array <- 'array_example' # character | name/uri of array that is url-encoded to filter
var.start <- 56 # integer | start time for tasks to filter by
var.end <- 56 # integer | end time for tasks to filter by
var.page <- 56 # integer | pagination offset
var.per.page <- 56 # integer | pagination limit
var.type <- 'type_example' # character | task type, \"QUERY\", \"SQL\", \"UDF\"
var.status <- 'status_example' # character | Filter to only return these statuses
var.search <- 'search_example' # character | search string that will look at name, namespace or description fields
var.orderby <- 'orderby_example' # character | sort by which field valid values include start_time, name

api.instance <- TasksApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$TasksGet(namespace=var.namespace, created.by=var.created.by, array=var.array, start=var.start, end=var.end, page=var.page, per.page=var.per.page, type=var.type, status=var.status, search=var.search, orderby=var.orderby)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TasksApi$new()}}
\item \href{#method-RunSQL}{\code{TasksApi$RunSQL()}}
\item \href{#method-RunSQLWithHttpInfo}{\code{TasksApi$RunSQLWithHttpInfo()}}
\item \href{#method-TaskIdGet}{\code{TasksApi$TaskIdGet()}}
\item \href{#method-TaskIdGetWithHttpInfo}{\code{TasksApi$TaskIdGetWithHttpInfo()}}
\item \href{#method-TasksGet}{\code{TasksApi$TasksGet()}}
\item \href{#method-TasksGetWithHttpInfo}{\code{TasksApi$TasksGetWithHttpInfo()}}
\item \href{#method-clone}{\code{TasksApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSQL"></a>}}
\if{latex}{\out{\hypertarget{method-RunSQL}{}}}
\subsection{Method \code{RunSQL()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$RunSQL(namespace, sql, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSQLWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunSQLWithHttpInfo}{}}}
\subsection{Method \code{RunSQLWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$RunSQLWithHttpInfo(namespace, sql, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskIdGet"></a>}}
\if{latex}{\out{\hypertarget{method-TaskIdGet}{}}}
\subsection{Method \code{TaskIdGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$TaskIdGet(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskIdGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TaskIdGetWithHttpInfo}{}}}
\subsection{Method \code{TaskIdGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$TaskIdGetWithHttpInfo(id, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TasksGet"></a>}}
\if{latex}{\out{\hypertarget{method-TasksGet}{}}}
\subsection{Method \code{TasksGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$TasksGet(
  namespace = NULL,
  created.by = NULL,
  array = NULL,
  start = NULL,
  end = NULL,
  page = NULL,
  per.page = NULL,
  type = NULL,
  status = NULL,
  search = NULL,
  orderby = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TasksGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TasksGetWithHttpInfo}{}}}
\subsection{Method \code{TasksGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$TasksGetWithHttpInfo(
  namespace = NULL,
  created.by = NULL,
  array = NULL,
  start = NULL,
  end = NULL,
  page = NULL,
  per.page = NULL,
  type = NULL,
  status = NULL,
  search = NULL,
  orderby = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TasksApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
