% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_api.R
\docType{class}
\name{QueryApi}
\alias{QueryApi}
\title{Query operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Query
}
\section{Methods}{

\describe{
\strong{ FinalizeQuery } \emph{  }
send a query to run against a specified array/URI registered to a group/project

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } type character
\item \emph{ @param } content.type character
\item \emph{ @param } query \link{Query}
\item \emph{ @param } x.payer character
\item \emph{ @param } open.at integer
\item \emph{ @returnType } \link{Query} \cr


\item status code : 200 | query completed and results are returned in query object

\item return type : Query 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 204 | query completed successfully with no return


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetEstResultSizes } \emph{  }
send a query to run against a specified array/URI registered to a group/project

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } type character
\item \emph{ @param } content.type character
\item \emph{ @param } query \link{Query}
\item \emph{ @param } x.payer character
\item \emph{ @param } open.at integer
\item \emph{ @returnType } \link{Query} \cr


\item status code : 200 | query est result size computed and results are returned in query object

\item return type : Query 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just computed query result size \cr
}
\item status code : 204 | query completed successfully with no return


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ SubmitQuery } \emph{  }
send a query to run against a specified array/URI registered to a group/project

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } type character
\item \emph{ @param } content.type character
\item \emph{ @param } query \link{Query}
\item \emph{ @param } x.payer character
\item \emph{ @param } open.at integer
\item \emph{ @returnType } \link{Query} \cr


\item status code : 200 | query completed and results are returned in query object

\item return type : Query 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 204 | query completed successfully with no return


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  FinalizeQuery  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.type <- 'type_example' # character | type of query
var.content.type <- 'application/json' # character | Content Type of input and return mime
var.query <- Query$new() # Query | query to run
var.x.payer <- 'x.payer_example' # character | Name of organization or user who should be charged for this request
var.open.at <- 56 # integer | open_at for array in unix epoch

api.instance <- QueryApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$FinalizeQuery(var.namespace, var.array, var.type, var.content.type, var.query, x.payer=var.x.payer, open.at=var.open.at)


####################  GetEstResultSizes  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.type <- 'type_example' # character | type of query
var.content.type <- 'application/json' # character | Content Type of input and return mime
var.query <- Query$new() # Query | query to run
var.x.payer <- 'x.payer_example' # character | Name of organization or user who should be charged for this request
var.open.at <- 56 # integer | open_at for array in unix epoch

api.instance <- QueryApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetEstResultSizes(var.namespace, var.array, var.type, var.content.type, var.query, x.payer=var.x.payer, open.at=var.open.at)


####################  SubmitQuery  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.type <- 'type_example' # character | type of query
var.content.type <- 'application/json' # character | Content Type of input and return mime
var.query <- Query$new() # Query | query to run
var.x.payer <- 'x.payer_example' # character | Name of organization or user who should be charged for this request
var.open.at <- 56 # integer | open_at for array in unix epoch

api.instance <- QueryApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitQuery(var.namespace, var.array, var.type, var.content.type, var.query, x.payer=var.x.payer, open.at=var.open.at)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{QueryApi$new()}}
\item \href{#method-FinalizeQuery}{\code{QueryApi$FinalizeQuery()}}
\item \href{#method-FinalizeQueryWithHttpInfo}{\code{QueryApi$FinalizeQueryWithHttpInfo()}}
\item \href{#method-GetEstResultSizes}{\code{QueryApi$GetEstResultSizes()}}
\item \href{#method-GetEstResultSizesWithHttpInfo}{\code{QueryApi$GetEstResultSizesWithHttpInfo()}}
\item \href{#method-SubmitQuery}{\code{QueryApi$SubmitQuery()}}
\item \href{#method-SubmitQueryWithHttpInfo}{\code{QueryApi$SubmitQueryWithHttpInfo()}}
\item \href{#method-clone}{\code{QueryApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FinalizeQuery"></a>}}
\if{latex}{\out{\hypertarget{method-FinalizeQuery}{}}}
\subsection{Method \code{FinalizeQuery()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$FinalizeQuery(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FinalizeQueryWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FinalizeQueryWithHttpInfo}{}}}
\subsection{Method \code{FinalizeQueryWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$FinalizeQueryWithHttpInfo(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetEstResultSizes"></a>}}
\if{latex}{\out{\hypertarget{method-GetEstResultSizes}{}}}
\subsection{Method \code{GetEstResultSizes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$GetEstResultSizes(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetEstResultSizesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetEstResultSizesWithHttpInfo}{}}}
\subsection{Method \code{GetEstResultSizesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$GetEstResultSizesWithHttpInfo(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitQuery"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitQuery}{}}}
\subsection{Method \code{SubmitQuery()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$SubmitQuery(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitQueryWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitQueryWithHttpInfo}{}}}
\subsection{Method \code{SubmitQueryWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$SubmitQueryWithHttpInfo(
  namespace,
  array,
  type,
  content.type,
  query,
  x.payer = NULL,
  open.at = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
