% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/udf_api.R
\docType{class}
\name{UdfApi}
\alias{UdfApi}
\title{Udf operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Udf
}
\section{Methods}{

\describe{
\strong{ GetUDFInfo } \emph{  }
get a specific UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } \link{UDFInfo} \cr


\item status code : 200 | UDFInfo was retrieved successfully

\item return type : UDFInfo 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | udf not found


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUDFInfoList } \emph{  }
get a all UDFs accessible to the user

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } created.by character
\item \emph{ @param } page integer
\item \emph{ @param } per.page integer
\item \emph{ @param } type character
\item \emph{ @param } search character
\item \emph{ @param } orderby character
\item \emph{ @param } tag list( character )
\item \emph{ @returnType } \link{UDFListingData} \cr


\item status code : 200 | UDFInfo list

\item return type : UDFListingData 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | udf not found


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ GetUDFInfoSharingPolicies } \emph{  }
Get all sharing details of the udf

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @returnType } list( \link{UDFSharing} ) \cr


\item status code : 200 | List of all specific sharing policies

\item return type : array[UDFSharing] 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | UDF does not exist or user does not have permissions to view array sharing policies


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ RegisterUDFInfo } \emph{  }
register a UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf \link{UDFInfoUpdate}


\item status code : 204 | udf registered successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ShareUDFInfo } \emph{  }
Share a UDF with a user

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf.sharing \link{UDFSharing}


\item status code : 204 | UDF shared successfully


\item response headers :

\tabular{ll}{
}
\item status code : 404 | UDF does not exist or user does not have permissions to share udf


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ SubmitGenericUDF } \emph{  }
submit a generic UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } udf \link{GenericUDF}
\item \emph{ @param } accept.encoding character


\item status code : 200 | udf completed and the udf-type specific result is returned

\item return type : data.frame 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just request if task was started \cr
}
}

\strong{ SubmitUDF } \emph{  }
send a UDF to run against a specified array/URI registered to a group/project

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } array character
\item \emph{ @param } udf \link{UDF}
\item \emph{ @param } x.payer character
\item \emph{ @param } accept.encoding character


\item status code : 200 | udf completed and the udf-type specific result is returned

\item return type : data.frame 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed request \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just request if task was started \cr
}
}

\strong{ UpdateUDFInfo } \emph{  }
updated an existing registerd UDF in the given namespace

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } name character
\item \emph{ @param } udf \link{UDFInfoUpdate}


\item status code : 204 | udf updated successfully


\item response headers :

\tabular{ll}{
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  GetUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register udf under

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUDFInfo(var.namespace, var.name)


####################  GetUDFInfoList  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace to filter
var.created.by <- 'created.by_example' # character | username to filter
var.page <- 56 # integer | pagination offset
var.per.page <- 56 # integer | pagination limit
var.type <- 'type_example' # character | udf type, \"generic\", \"single_array\"
var.search <- 'search_example' # character | search string that will look at name, namespace or description fields
var.orderby <- 'orderby_example' # character | sort by which field valid values include created_at, last_used, name
var.tag <- ['tag_example'] # array[character] | tag to search for, more than one can be included

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUDFInfoList(namespace=var.namespace, created.by=var.created.by, page=var.page, per.page=var.per.page, type=var.type, search=var.search, orderby=var.orderby, tag=var.tag)


####################  GetUDFInfoSharingPolicies  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name of UDFInfo

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$GetUDFInfoSharingPolicies(var.namespace, var.name)


####################  RegisterUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register udf under
var.udf <- UDFInfoUpdate$new() # UDFInfoUpdate | udf to register

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RegisterUDFInfo(var.namespace, var.name, var.udf)


####################  ShareUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name of UDFInfo
var.udf.sharing <- UDFSharing$new() # UDFSharing | Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the udf will not be shared with the namespace at all

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$ShareUDFInfo(var.namespace, var.name, var.udf.sharing)


####################  SubmitGenericUDF  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.udf <- GenericUDF$new() # GenericUDF | udf to run
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitGenericUDF(var.namespace, var.udf, accept.encoding=var.accept.encoding)


####################  SubmitUDF  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.array <- 'array_example' # character | name/uri of array that is url-encoded
var.udf <- UDF$new() # UDF | udf to run
var.x.payer <- 'x.payer_example' # character | Name of organization or user who should be charged for this request
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$SubmitUDF(var.namespace, var.array, var.udf, x.payer=var.x.payer, accept.encoding=var.accept.encoding)


####################  UpdateUDFInfo  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace array is in (an organization name or user's username)
var.name <- 'name_example' # character | name to register udf under
var.udf <- UDFInfoUpdate$new() # UDFInfoUpdate | udf to update

api.instance <- UdfApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$UpdateUDFInfo(var.namespace, var.name, var.udf)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{UdfApi$new()}}
\item \href{#method-GetUDFInfo}{\code{UdfApi$GetUDFInfo()}}
\item \href{#method-GetUDFInfoWithHttpInfo}{\code{UdfApi$GetUDFInfoWithHttpInfo()}}
\item \href{#method-GetUDFInfoList}{\code{UdfApi$GetUDFInfoList()}}
\item \href{#method-GetUDFInfoListWithHttpInfo}{\code{UdfApi$GetUDFInfoListWithHttpInfo()}}
\item \href{#method-GetUDFInfoSharingPolicies}{\code{UdfApi$GetUDFInfoSharingPolicies()}}
\item \href{#method-GetUDFInfoSharingPoliciesWithHttpInfo}{\code{UdfApi$GetUDFInfoSharingPoliciesWithHttpInfo()}}
\item \href{#method-RegisterUDFInfo}{\code{UdfApi$RegisterUDFInfo()}}
\item \href{#method-RegisterUDFInfoWithHttpInfo}{\code{UdfApi$RegisterUDFInfoWithHttpInfo()}}
\item \href{#method-ShareUDFInfo}{\code{UdfApi$ShareUDFInfo()}}
\item \href{#method-ShareUDFInfoWithHttpInfo}{\code{UdfApi$ShareUDFInfoWithHttpInfo()}}
\item \href{#method-SubmitGenericUDF}{\code{UdfApi$SubmitGenericUDF()}}
\item \href{#method-SubmitGenericUDFWithHttpInfo}{\code{UdfApi$SubmitGenericUDFWithHttpInfo()}}
\item \href{#method-SubmitUDF}{\code{UdfApi$SubmitUDF()}}
\item \href{#method-SubmitUDFWithHttpInfo}{\code{UdfApi$SubmitUDFWithHttpInfo()}}
\item \href{#method-UpdateUDFInfo}{\code{UdfApi$UpdateUDFInfo()}}
\item \href{#method-UpdateUDFInfoWithHttpInfo}{\code{UdfApi$UpdateUDFInfoWithHttpInfo()}}
\item \href{#method-clone}{\code{UdfApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfo}{}}}
\subsection{Method \code{GetUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{GetUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoList"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoList}{}}}
\subsection{Method \code{GetUDFInfoList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoList(
  namespace = NULL,
  created.by = NULL,
  page = NULL,
  per.page = NULL,
  type = NULL,
  search = NULL,
  orderby = NULL,
  tag = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoListWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoListWithHttpInfo}{}}}
\subsection{Method \code{GetUDFInfoListWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoListWithHttpInfo(
  namespace = NULL,
  created.by = NULL,
  page = NULL,
  per.page = NULL,
  type = NULL,
  search = NULL,
  orderby = NULL,
  tag = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoSharingPolicies"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoSharingPolicies}{}}}
\subsection{Method \code{GetUDFInfoSharingPolicies()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoSharingPolicies(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetUDFInfoSharingPoliciesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-GetUDFInfoSharingPoliciesWithHttpInfo}{}}}
\subsection{Method \code{GetUDFInfoSharingPoliciesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$GetUDFInfoSharingPoliciesWithHttpInfo(namespace, name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterUDFInfo}{}}}
\subsection{Method \code{RegisterUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$RegisterUDFInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegisterUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RegisterUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{RegisterUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$RegisterUDFInfoWithHttpInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShareUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ShareUDFInfo}{}}}
\subsection{Method \code{ShareUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$ShareUDFInfo(namespace, name, udf.sharing, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ShareUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ShareUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{ShareUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$ShareUDFInfoWithHttpInfo(namespace, name, udf.sharing, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitGenericUDF"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitGenericUDF}{}}}
\subsection{Method \code{SubmitGenericUDF()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitGenericUDF(namespace, udf, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitGenericUDFWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitGenericUDFWithHttpInfo}{}}}
\subsection{Method \code{SubmitGenericUDFWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitGenericUDFWithHttpInfo(
  namespace,
  udf,
  accept.encoding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitUDF"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitUDF}{}}}
\subsection{Method \code{SubmitUDF()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitUDF(
  namespace,
  array,
  udf,
  x.payer = NULL,
  accept.encoding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SubmitUDFWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SubmitUDFWithHttpInfo}{}}}
\subsection{Method \code{SubmitUDFWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$SubmitUDFWithHttpInfo(
  namespace,
  array,
  udf,
  x.payer = NULL,
  accept.encoding = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateUDFInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateUDFInfo}{}}}
\subsection{Method \code{UpdateUDFInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UpdateUDFInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateUDFInfoWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateUDFInfoWithHttpInfo}{}}}
\subsection{Method \code{UpdateUDFInfoWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$UpdateUDFInfoWithHttpInfo(namespace, name, udf, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UdfApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
