% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql_api.R
\docType{class}
\name{SqlApi}
\alias{SqlApi}
\title{Sql operations}
\format{
An \code{R6Class} generator object
}
\description{
tiledbcloud.Sql
}
\section{Methods}{

\describe{
\strong{ RunSQL } \emph{  }
Run a sql query

\itemize{
\item \emph{ @param } namespace character
\item \emph{ @param } sql \link{SQLParameters}
\item \emph{ @param } accept.encoding character


\item status code : 200 | JSON results in array of objects form, if the query returns results

\item return type : array[object] 
\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 204 | SQL executed successfully


\item response headers :

\tabular{ll}{
X-TILEDB-CLOUD-TASK-ID \tab Task ID for just completed query \cr
}
\item status code : 0 | error response

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  RunSQL  ####################

library(tiledbcloud)
var.namespace <- 'namespace_example' # character | namespace to run task under is in (an organization name or user's username)
var.sql <- SQLParameters$new() # SQLParameters | sql being submitted
var.accept.encoding <- 'accept.encoding_example' # character | Encoding to use

api.instance <- SqlApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-TILEDB-REST-API-KEY'] <- 'TODO_YOUR_API_KEY';

#Configure HTTP basic authorization: BasicAuth
# provide your username in the user-serial format
api.instance$apiClient$username <- '<user-serial>'; 
# provide your api key generated using the developer portal
api.instance$apiClient$password <- '<api_key>';

result <- api.instance$RunSQL(var.namespace, var.sql, accept.encoding=var.accept.encoding)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SqlApi$new()}}
\item \href{#method-RunSQL}{\code{SqlApi$RunSQL()}}
\item \href{#method-RunSQLWithHttpInfo}{\code{SqlApi$RunSQLWithHttpInfo()}}
\item \href{#method-clone}{\code{SqlApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SqlApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSQL"></a>}}
\if{latex}{\out{\hypertarget{method-RunSQL}{}}}
\subsection{Method \code{RunSQL()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SqlApi$RunSQL(namespace, sql, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunSQLWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-RunSQLWithHttpInfo}{}}}
\subsection{Method \code{RunSQLWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SqlApi$RunSQLWithHttpInfo(namespace, sql, accept.encoding = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SqlApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
